* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  /* падинги и бордеры не добавляют доп. пространство, а забирают у блока*/
}

header {
  /* height: 70px; */
  background-color: rgb(232, 232, 232);
  padding: 20px 0;
  margin-bottom: 30px;
}

h1 {
  font-family: 'Ubuntu', sans-serif;
  text-align: center;
}

/* h1:hover {
  color: red;
} */

main {
  margin: auto;
  width: 90%;
  background-color: khaki;
  display: flex;
  flex-wrap: wrap;
  /* элементы остаются с заданными размерами и если не хватает места, перепрыгивают ниже*/
}

.item {
  margin: 10px;
  padding: 20px;

  width: calc(50% - 20px);
  height: 300px;

  /* background-color: green; */
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center;

  transition: 2s;
}

.item:hover {
  transform: scale(1.05);
}

.item-1 {
  background-image: url(./img/adventure_time.jpg);
}

.item-2 {
  background-image: url(./img/brickleberry.jpg);
}

.item-3 {
  background-image: url(./img/futurama.jpg);
}

.item-4 {
  background-image: url(./img/gravity-falls.jpg);
}

.item-5 {
  background-image: url(./img/griffiny.jpg);
}

.item-6 {
  background-image: url(./img/gumball.jpg);
}

.item-7 {
  background-image: url(./img/rick_and_morty.jpeg);
}

.item-8 {
  background-image: url(./img/simpsons.jpg);
}


/* 
Псевдоклассы 


1. background-image: url(./img/rick_and_morty.jpeg); - добавление картинки как фон
2. img - добавление картинки в html

background-size: cover; 
  cover - картинка подстраивается под ширину блока, а высота меняется пропорционально 
  contain - картинка подстраивается под высоту блока,
  а ширина меняется пропорционально

box-sizing: border-box; - padding и border не добавляют доп. пространство, а забирают у блока

функция calc() позволяет рассчитать размеры используя математические операторы

flex - по умолчанию позволяет разместить элементы в строку.
flex задаем в родительский элемент блоков, которые мы хотим разместить в строку

justify-content: flex-end;
align-items: center; - позиционирование элементов по горизонтали

justify-content - это свойство CSS, которое выравнивает элементы горизонтально и принимает следующие значения: 
      flex-start: элементы выравниваются по левой стороне контейнера. flex-end: элементы выравниваются по правой стороне контейнера. center: элементы выравниваются по центру контейнера. 
      space-between: элементы отображаются с одинаковыми отступами между ними. 
      space-around: элементы отображаются с одинаковыми отступами вокруг них.

align-items - это свойство CSS выравнивает элементы вертикально и принимает следующие значения: 
      flex-start: элементы выравниваются по верхнему краю контейнера. flex-end: элементы выравниваются по нижнему краю контейнера. 
      center: элементы выравниваются вертикально по центру контейнера. baseline: элементы отображаются на базовой линии контейнера. 
      stretch: элементы растягиваются,чтобы заполнить контейнер.

flex-direction - это свойство CSS задает направление, в котором располагаются элементы в контейнере, и принимает следующие значения: 
      row: элементы размещаются по направлению текста.
      row-reverse: элементы отображаются в обратном порядке к направлению текста. 
      column: элементы располагаются сверху вниз. 
      column-reverse: элементы располагаются снизу вверх.

Иногда изменения порядка отображения элементов в контейнере недостаточно. В таких случаях мы можем применить свойство order для конкретных элементов. По умолчанию, значение этого свойства у элементов равно 0,
но мы можем задать положительное или отрицательное целое число этому свойству.

Ещё одно свойство, которое ты можешь применить к определенному элементу — это align-self. Это свойство принимает те же значения,
что и align-items.

flex-wrap - принимает следующие значения: 
      nowrap: размеры элементов устанавливаются автоматически, чтобы они поместились в один ряд. 
      wrap: элементы автоматически переносятся на новую строку. wrap-reverse: элементы автоматически переносятся на новую строку, но строки расположены в обратном порядке.

Два свойства flex-direction и flex-wrap используются так часто вместе, что было создано свойство flex-flow для их комбинирования. Это свойство принимает их значения, разделённые пробелом. Например, ты можешь использовать flex-flow: row wrap, чтобы элементы располагались в ряд и автоматически переносились на новую строку.
*/